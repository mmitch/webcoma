#!/usr/bin/perl -w
use strict;

##
##  [ 2do ]
##
#
# - DESCRIPTION-Meta-Tag sinnvoll füllen
# - table summary="" lokalisieren (de/en)
# - mehrere DLINKs auf einer Zeile nicht möglich!
#
##
##

# $Id: webCOMA.pl,v 1.41 2004-10-16 16:39:51 mitch Exp $

#
# $Log: webCOMA.pl,v $
# Revision 1.41  2004-10-16 16:39:51  mitch
# add links for valid HTML and valid CSS
#
# Revision 1.40  2003/08/31 18:40:16  mitch
# Beginn der Umstellung auf CSS
#
# Revision 1.39  2003/01/19 10:31:32  mitch
# Keyword-Header gefixt, war immer leer
#
# Revision 1.38  2002/09/28 09:35:59  mitch
# Versionsnummern auf Downloadseiten jetzt linksbündig.
#
# Revision 1.37  2002/07/26 17:54:28  mitch
# width=100% zu width="100%" gequoted
#
# Revision 1.36  2002/02/03 22:00:29  mitch
# some additional \n in navBar
#
# Revision 1.35  2002/02/03 21:54:11  mitch
# included RCS tag in meta tags
#
# Revision 1.34  2002/01/21 18:45:48  mitch
# Fixed bug with all "grep"s: Looked for .*$a.* instead of just $a
#
# Revision 1.33  2001/10/07 15:50:04  mitch
# Minimale Designänderung
#
# Revision 1.32  2001/10/06 19:23:46  mitch
# Sitemap nochmal repariert
#
# Revision 1.31  2001/10/06 19:19:21  mitch
# Sitemap repariert
#
# Revision 1.30  2001/10/06 19:04:55  mitch
# Table-summaries, allgemein saubereres HTML
#
# Revision 1.29  2001/08/24 18:54:25  mitch
# #DLINKs sind jetzt auch in Newsartikeln möglich
#
# Revision 1.28  2001/07/23 19:36:43  mitch
# eMail auf cgarbs.de umgestellt
#
# Revision 1.27  2001/07/21 10:06:07  mitch
# Im Subtitle-TITEL darf jetzt ein Doppelpunkt stehen
#
# Revision 1.26  2001/07/21 09:52:04  mitch
# Subtitelverwaltung auf Seitenebene (interne Links + Übersicht).
#
# Revision 1.25  2001/07/15 14:07:07  mitch
# Seitendesign ziemlich geändert
#
# Revision 1.24  2001/06/01 20:04:43  mitch
# Checksummenprüfung für ISBN-Nummern
#
# Revision 1.23  2001/03/22 13:55:40  mitch
# Quellcode für jede Seite verfügbar; webCOMA-Link auf jeder Seite gesetzt
#
# Revision 1.22  2001/03/18 17:00:22  mitch
# Navigationspfeile eingebaut
#
# Revision 1.21  2001/02/13 22:56:40  mitch
# W3C-Konformität
#
# Revision 1.20  2001/02/06 22:20:25  mitch
# webCOMA v1.19 statt webCOMA $Revision: 1.41 $
#
# Revision 1.19  2001/01/14 23:01:12  mitch
# Position der Bilder in der Graphbox (links/rechts) vertauscht.
#
# Revision 1.18  2001/01/14 20:30:45  mitch
# Untersützung von mehreren Bänden bei amazon-Bücherlinks
#
# Revision 1.17  2000/12/29 17:02:20  mitch
# Links zu Amazon.de gesetzt
#
# Revision 1.16  2000/12/07 20:50:11  mitch
# Seitenfuß geändert
#
# Revision 1.15  2000/12/05 21:00:21  mitch
# Datum/Zeit auf einer Seite bezieht sich auf die letzte
# Quellcodeänderung
#
# Revision 1.14  2000/11/30 22:12:37  mitch
# Aktuelles Datum wird in META-Tag gespeichert
#
# Revision 1.13  2000/11/25 14:04:46  mitch
# .dot-Datei für Graphviz (siehe freshmeat) wird erstellt
#
# Revision 1.12  2000/11/19 16:18:18  mitch
# Bugfix in gehashten (D)LINKS
#
# Revision 1.11  2000/11/19 14:19:33  mitch
# (D)LINKS unterstützen #-named references
#
# Revision 1.10  2000/11/19 14:09:40  mitch
# Newsbox auf download-Seiten
#
# Revision 1.9  2000/11/19 13:47:22  mitch
# Bugfix: zwei RegExps angepaßt
#
# Revision 1.8  2000/11/19 12:46:21  mitch
# Revisit ist jetzt variabel (und auf 7 Tage runter)
# Bugfix:
# Hostname jetzt ohne Zeilenumbruch
# 2x falscher Regexp
# 1x Warning bei undefined
#
# Revision 1.7  2000/11/18 14:51:31  mitch
# Sitenamen auf 'Master Mitch' gekürzt
#
# Revision 1.6  2000/11/18 11:43:01  mitch
# Seiten können jetzt komplett in einer Sprache gehalten werden,
# sie tauchen dann weder in der Sitemap noch in der Navbar der
# anderen Sprache auf.
#
# Revision 1.5  2000/11/18 11:00:53  mitch
# Graphboxen für Literatur/Video eingebaut
#
# Revision 1.4  2000/11/16 20:39:54  mitch
# Sauberes HTML wird erzeugt (weblint-geprüft)
#
# Revision 1.3  2000/11/16 15:08:54  mitch
# Removed a warning
#
#

my $version   = ' webCOMA $Revision: 1.41 $ ';
$version =~ tr/$//d;
$version =~ s/Revision: /v/;
$version =~ s/^\s+//;
$version =~ s/\s+$//;

my $author    = "Christian Garbs";
my $authormail= 'mitch@cgarbs.de';
my $sitename  = "Master Mitch";
my $amazon_link = "http://www.amazon.de/exec/obidos/ASIN/%/mastemitchondane";
my @languages = ('de', 'en');
my $srcpath   = "in";
my $destpath  = "out";
my $startdoc  = "index";
my $template  = "$srcpath/TEMPLATE";
my $sourcepath= "source";
my %pagestructure;
my %date;
my $date_cmd  = "date";
my $copy_cmd  = "cp";
my $revisit   = "7 days";
my $host      = `hostname -f`;
chomp $host;
my %cache;
my %linkcache;
$linkcache{$startdoc} = "";
my %dlinkcache;
my %news;
my $dotfile = "homepage.dot";
my $subtitlecount = 0;

my %lastedited  = ( 'de' => 'letzte &Auml;nderung:', 'en' => 'last edited:' );
my %generatedby = ( 'de' => 'erstellt mit:', 'en' => 'generated by:' );
my %author      = ( 'de' => 'Autor:', 'en' => 'author:' );

sub scanStructure($$);
sub printPage($$);
sub initDates();
sub convertDate($$);
sub readTag($$);
sub navBar($$);
sub expand($$);
sub newsBox($$);
sub includeSiteMap($);
sub getLeft($$);
sub getRight($$);


{
    print "Initializing dates.\n";
    initDates();
    print "\n";

    open DOT, ">$dotfile" or die "can't open dotfile <$dotfile>: $!";
    print DOT "digraph \"$sitename\" {\n";
    print DOT "\tsize=\"7,8\";\n";
    print DOT "\tratio=stretch;\n";
    print DOT "\t$startdoc [shape=box];\n";

    print "Scanning site structure:\n";
    scanStructure($startdoc,"");
    foreach my $lang (@languages) {
	print "$lang: ";
	print (scalar @{$pagestructure{$lang}});
	print " pages found.\n";
    }

    print DOT "}\n";
    print "\n";
    close DOT or die "can't close dotfile <$dotfile>: $!";

    print "Scanning dlink integrity: ";
    foreach my $dlink (keys %dlinkcache) {
	if (! defined $linkcache{$dlink}) {
	    print "\n";
	    die "DLINK TO $dlink COULD NOT BE RESOLVED\n";
	}
    }
    print "OK\n\n";

    print "Looking for stale files: ";
    open FILES, "find $srcpath -maxdepth 1 -name *.page |" or die "can't list directory: $!";
    while (my $file = <FILES>) {
	chomp $file;
	$file =~ s/^$srcpath\///;
	$file =~ s/\.page$//;
	if (! defined $linkcache{$file}) {
	    print "\n";
	    die "STALE FILE $file.page DETECTED\n";
	}
    }
    close FILES or die "can't close directory list: $!";
    print "OK\n\n";

    print "Generating pages:\n";
    foreach my $lang (@languages) {
	for (my $page = 0; $page < @{$pagestructure{$lang}}; $page++) {
	    printPage($page,$lang);
	}
    }
    print "\n";

    print "Finished.\n\n";
    exit 0;
}


#

		  
sub scanStructure($$)
{
    my $doc    = shift;
    my $parent = shift;

    my @files;

    my $filedate = `$date_cmd -r "$srcpath/$doc.page" +%Y%m%d\\ %H:%M:%S`;
    

    foreach my $lang (@languages) {
	
	open IN, "<$srcpath/$doc.page" or die "can't open <$srcpath/$doc.page>: $!";

	my $valid = 0;

	while (<IN>) {
	    $valid = 1 if $_ =~ /^#VALID/;
	    last if $_ =~ /^#RCS/;
	}
	$_ =~ /(\$(Id):.*\$)/;  # (Id) because RCS should not find and substitute this line
        $cache{"$parent$doc"}{'RCS'} = ($1 or die "no rcs tag in $srcpath/$doc.page");

	next unless grep { $lang eq $_ } readTag("LANG", $lang);

	print "$lang:  $parent$doc\n";
	push @{$pagestructure{$lang}}, "$parent$doc";

	my @temp;
	@temp = readTag("TYPE", $lang);
	
	$cache{"$parent$doc"}{$lang}{'TYPE'}  = $temp[0];
	$cache{"$parent$doc"}{$lang}{'VALID'} = $valid;
	
	{
	    my $olddate;
	    my $text = "";
	    foreach my $news (readTag("NEWS", $lang)) {
		if ($news =~ /#DATE:(.*)/) {
		    if (defined $olddate) {

		        # vvv UGLY -- DOUPLICATE CODE !!! -- UGLY vvv
		        if ($text =~ /#DLINK:([^#]*)#/) {
			    my $link = $1;
			    $link =~ s/\!.*$//;
			    $dlinkcache{$link} = "";
			    
			    {
			      my ($from, $to) = ($doc, $1);
			      $from =~ s/-/_/g;
			      $to =~ s/-/_/g;
			      print DOT "\t$from -> $to [style=dotted];\n";
			    }
			    
			}
		        # ^^^ UGLY -- DOUPLICATE CODE !!! -- UGLY ^^^
			
			## COPY BEGIN
			$text =~ s/\s+$//;
			$text =~ s/^\s+//;
		        $text = expand( $text, $lang );
			$news{"$parent$doc"}{$olddate}{$lang} = $text unless $text eq "";
			## COPY END
		    }
		    $text = "";
		    $olddate = $1;
		    $olddate =~ s/\s+$//;
		    $olddate =~ s/^\s+//;
		    die "EMPTY NEWS DATE\n" if ($olddate eq "");
		} else {
		    $text .= "$news ";
		}
	    }
	    ## COPY BEGIN
	    $text =~ s/\s+$//;
	    $text =~ s/^\s+//;
	    $text = expand( $text, $lang );
	    $news{"$parent$doc"}{$olddate}{$lang} = $text unless $text eq "";
	    ## COPY END
	}
	    
	@temp = readTag("TITLE", $lang);
	$cache{"$parent$doc"}{$lang}{'TITLE'} = $temp[0];

	$cache{"$parent$doc"}{$lang}{'DATE'} = convertDate($lang, $filedate);
	
	@temp = readTag("KEYWORDS", $lang);
	my @keywords = $temp[0];

	my $subtitles = [];

	if ($cache{"$parent$doc"}{$lang}{'TYPE'} eq "oldschool") {
	    @temp = readTag("OLDSCHOOL", $lang);
	} else {
	    @temp = readTag("PLAIN", $lang);
	}
	
	foreach my $line (@temp) {

	    if ($line =~ /#LINK:([^#]*)#/) {
		my $link = $1;
		$link =~ s/\!.*$//;
		if ((grep {$link eq $_} @files) == 0 ) {
		    push @files, $link;
		}
	    }

	    # vvv UGLY -- DOUPLICATE CODE !!! -- UGLY vvv
	    if ($line =~ /#DLINK:([^#]*)#/) {
		my $link = $1;
		$link =~ s/\!.*$//;
		$dlinkcache{$link} = "";

		{
		    my ($from, $to) = ($doc, $1);
		    $from =~ s/-/_/g;
		    $to =~ s/-/_/g;
		    print DOT "\t$from -> $to [style=dotted];\n";
		}
	    }
	    # ^^^ UGLY -- DOUPLICATE CODE !!! -- UGLY ^^^

	    if ($line =~ /#SUBTITLE:(.*):([^:]*):/) {
		my ($show, $title) = ($1, $2);
		if ($title eq "") {
		    $title = $show;
		}
		die "SUBTITLE without title!" if ($title eq "");

		push @{$subtitles}, $title;

	    }

	    
	}
	close IN or die "can't close <$srcpath/$doc.page>: $!";

	$cache{"$parent$doc"}{$lang}{'SUBTITLES'} = $subtitles;

    }

    foreach my $file (@files) {
	next if $file =~ /^\s*$/;
	if (defined $linkcache{$file}) {
	    die "$srcpath/$file.page HAS MULTIPLE PARENTAGES\n";
	} else {
	    $linkcache{$file} = "";
	    if (! -e "$srcpath/$file.page") {
		system("$copy_cmd $template $srcpath/$file.page") == 0 or die "copy failed: $?";
		warn "CREATING NEW TEMPLATE FOR $srcpath/$file.page\n";
		my $taste=<STDIN>;
	    }

	    {
		my ($from, $to) = ($doc, $file);
		$from =~ s/-/_/g;
		$to =~ s/-/_/g;
		print DOT "\t$from -> $to;\n";
	    }

	    scanStructure($file, "$parent$doc!");
	}
    }
}


#


sub printPage($$)
{
    my $i       = shift;
    my $lang    = shift;
    my $page    = $pagestructure{$lang}[$i];

 
    my ($file, $path, @elements) = getStuff($i, $lang);
   
    my $date = $cache{$page}{$lang}{'DATE'};
    my $typ = $cache{$page}{$lang}{'TYPE'};
    my $title = $cache{$page}{$lang}{'TITLE'};
    my $gbAlign = 1;
    
    print "$file.$lang.html\t<$title>\t[$typ]\n";

    open IN, "<$srcpath/$file.page" or die "can't open <$srcpath/$file.page>: $!";
    open OUT, ">$destpath/$file.$lang.html" or die "can't open <$destpath/$file.$lang.html>: $!";
    
    my @news = readTag("NEWS", $lang);
    
    my @temp = readTag("KEYWORDS", $lang);
    my @keywords = $temp[0];

    $subtitlecount = 0;
    
    print OUT <<"EOF";
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head><title>$sitename - $title</title>
<link rel="stylesheet" type="text/css" href="style.css">
<meta name="generator" content="$version">
<meta name="generating_host" content="$host">
<meta name="generation_date" content="$date{$lang}">
<meta name="rcs_tag" content="$cache{$page}{'RCS'}">
<meta name="ROBOTS" content="FOLLOW">
<meta name="KEYWORDS" content="@keywords">
<meta name="author" content="$author ($authormail)">
<meta http-equiv="revisit-after" content="$revisit">
<meta http-equiv="content-language" content="$lang">
</head>
<body>
EOF
    ;
#<meta name="DESCRIPTION" content="$sitename - $title">
    
    navBar($i, $lang);

    print OUT << "EOF";
<p class="topbar">&nbsp;&nbsp;&nbsp;$title</p>
EOF
    ;

    if (($typ eq "plain") or ($typ eq "news")) {

	my @lines = readTag("PLAIN", $lang);
	while (@lines) {
	    my $line = shift @lines;
	    $line = expand($line, $lang);
	    if ($line =~ /#SITEMAP#/) {
		includeSiteMap($lang);
	    } elsif ($line =~ /\#GRAPHBOX</) {

		my @amazon;
		my ($x, $y, $file, $amazon, $alt) = split /!/, shift @lines, 5;
		die "Error in GRAPHBOX in $page:\n$x!$y!$file!$amazon$alt\n" unless defined $alt;

		if ($amazon =~ /,/)
		{
		    ($amazon, @amazon) = split /,/, $amazon;
		}

		print OUT "<center><table width=\"95%\" border=0><tr>\n";

		my ($align, $align2);
		if ($gbAlign) {
		    $gbAlign = 0;
		    $align='align="left"';
		    $align2='align="right"';
		} else {
		    $gbAlign = 1;
		    $align='align="right"';
		    $align2='align="left"';
		}
		if (($amazon eq "") || ($lang ne "de")) {
		    print OUT "<td $align><img src=\"pics/$file\" alt=\"$alt\" width=$x height=$y $align2 hspace=5 vspace=5>";
		} else {
		    my $link = $amazon_link;
		    die "wrong ASIN chksum: <$amazon> @ GRAPHBOX in $page:\n$x!$y!$file!$amazon$alt\n" unless CheckISBN($amazon);
		    $link =~ s/%/$amazon/;
		    print OUT "<td $align><a href=\"$link\"><img src=\"pics/$file\" alt=\"$alt\" width=$x height=$y $align2 hspace=5 vspace=5 border=0></a>";
		}

		while (@lines) {
		    my $line = shift @lines;
		    last if $line =~ /\#GRAPHBOX>/;
		    $line = expand($line, $lang);
		    print OUT "$line\n";
		}

		if (($amazon ne "") && ($lang eq "de")) {
		    my $link = $amazon_link;
		    $link =~ s/%/$amazon/;
		    die "wrong ASIN chksum: <$amazon> @ GRAPHBOX in $page:\n$x!$y!$file!$amazon$alt\n" unless CheckISBN($amazon);
		    print OUT "<ul><li><small>Einkaufen bei <a href=\"$link\">amazon.de</a>";
		    if (@amazon)
		    {
			print OUT ":<br>Band ";
			while (@amazon)
			{
			    my ($ep, $amazon) = split /:/, shift @amazon;
			    my $link = $amazon_link;
			    $link =~ s/%/$amazon/;
			    die "wrong ASIN chksum: <$ep:$amazon> @ GRAPHBOX in $page:\n$x!$y!$file![...]$alt\n" unless CheckISBN($amazon);
			    print OUT "<a href=\"$link\">$ep</a>";
			    print OUT " - " if (@amazon);
			}
		    }
		    print OUT "</small></li></ul>";
		}

		print OUT "</td></tr></table></center>\n";
	    } elsif ($line =~ /\#NEWS\#/) {
		if ($typ eq "plain") {
		    newsBox($page, $lang);
		} else {
		    newsBox("", $lang);
		}
	    } elsif ($line =~ /\#SUBTITLES(\/s)?\#/) {
		my $count = 0;
		if (defined $1) {
		    my %sorthash;
		    map {$sorthash{$_} = $count++} @{$cache{"$page"}{$lang}{'SUBTITLES'}};
		    foreach my $key (sort {uc($a) cmp uc($b)} keys %sorthash) {
			print OUT "[<a href=\"#$sorthash{$key}\">$key</a>] ";
		    }
		} else {
		    foreach my $subtitle (@{$cache{"$page"}{$lang}{'SUBTITLES'}}) {
			print OUT "[<a href=\"#$count\">$subtitle</a>] ";
			$count++;
		    }
		}
	    } else {
		print OUT "$line\n";
	    }
	}
	
    } elsif ($typ eq "oldschool") {

	my ($autor_head, $datum_head, $version_head, $size_head, $name_head, $comment_head);
	if ($lang eq "de") {
	    # Deutsch
	    
	    $autor_head =	"Autor";
	    $datum_head =	"Datum";
	    $version_head =	"Version";
	    $size_head =	"Gr&ouml;&szlig;e";
	    $name_head =	"Datei";
	    $comment_head =	"Hinweise";
	    
	} else {
	    # Englisch
	    
	    $autor_head =	"author";
	    $datum_head =	"date";
	    $version_head =	"version";
	    $size_head =	"size";
	    $name_head =	"file";
	    $comment_head =	"notes";
	    
	};
	
	# Vorlage durchgehen
	my @input = readTag("OLDSCHOOL", $lang);

	my $zeile= shift @input;
	while ($zeile !~ /^<!--.BEG/) {
	    $zeile= shift @input;
	}
	print OUT "$zeile";
	
	# Autor-Spalte ?
	
	my $autor_schalter;
	if ($zeile =~ /\ EXT\ /) {
	    $autor_schalter = "JA";
	} else {
	    $autor_schalter = "NEIN";
	};
	
	# Tabellenkopf
	
	my $fehler = 0;

	my $typ = shift @input;
	if ($typ ne "PROGRAMMNAME") {
	    $fehler++;
	    print "\n\nFEHLER [$fehler]: PROGRAMMNAME fehlt\n\n";
	}
	my $programmname=shift @input;
	
	$typ = shift @input;
	if ($typ ne "SPRUNGMARKE") {
	    $fehler++;
	    print "\n\nFEHLER [$fehler]: SPRUNGMARKE fehlt\n\n";
	}
	my $sprungmarke=shift @input;
	
	print OUT "<h2 align=\"center\">Download</h2>";
	print OUT "<h1 align=\"center\">$programmname</h1>";

	# Der Freitext		
	
	$typ = shift @input;
	if ($typ ne "FREITEXT") {
	    $fehler++;
	    printf "\n\nFEHLER [$fehler]: FREITEXT fehlt\n\n";
	}

	print OUT "<p>";
	$zeile = shift @input;
	while ($zeile ne "ZEILE") {
	    $zeile = expand($zeile,$lang);
	    print OUT "$zeile\n";	
	    $zeile = shift @input;
	}
	print OUT "</p>";

	print OUT "<table class=\"dwn\" summary=\"list of files\"><tr>";
	if ($autor_schalter eq "JA") {
	    print OUT "<th class=\"dwn\" align=\"left\">$autor_head</th>";
	};
	print OUT "<th class=\"dwn\">$datum_head</th>";
	print OUT "<th class=\"dwn\">$version_head</th>";
	print OUT "<th class=\"dwn\">$size_head</th>";
	print OUT "<th class=\"dwn\">$name_head</th>";
	print OUT "<th class=\"dwn\">$comment_head</th>";
	print OUT "</tr>";
	
	# Die einzelnen Zeilen
	
	$typ = $zeile;
	while (($typ eq "ZEILE") || ($typ eq "--HLINE--")) {

	    if ($typ eq "--HLINE--") {
		
		print OUT "<tr><td colspan=";
		if ($autor_schalter eq "JA") {
		    print OUT "6";
		} else {
		    print OUT "5";
		}
		print OUT "><hr></td></tr>\n";
		
	    } else {
		
		my $autor;
		if ($autor_schalter eq "JA") {
		    $autor = shift @input;
		};
		my $datum = shift @input;
		my $version = shift @input;
		my $size = shift @input;
		my $url = shift @input;
		my $name = shift @input;
		my $comment = shift @input;
		
		print OUT "<tr>";
		if ($autor_schalter eq "JA") {
		    print OUT "<td class=\"dwnauthor\">$autor</td>";
		};
		print OUT "<td class=\"dwndate\">$datum</td>";
		print OUT "<td class=\"dwnversion\">$version</td>";
		print OUT "<td class=\"dwnsize\">$size</td>";
		print OUT "<td class=\"dwnlink\"><a href=\"$url\">$name</a></td>";
		print OUT "<td class=\"dwncomment\">$comment</td>";
		print OUT "</tr>\n";
		
	    }
	    
	    $typ = shift @input;
	}
	
	# Tabellenfuß
	
	if ($typ !~ /^<!--.END/) {
	    $fehler++;
	    print "\n\nFEHLER [$fehler]: <!--END oder ZEILE fehlt \n\n";
	}
	
	print OUT "</table><p><br></p>";
	print OUT "$typ\n";
	

	if ($fehler > 0) {
	    
	    die "\n\nOBACHT! ES SIND $fehler FEHLER AUFGETRETEN!\n\n";
	    
	}

	newsBox($page, $lang);

    } else {
	die "UNKNOWN TYPE <$typ>\n";
    }

    #
    # Seitenfuß
    #

    print OUT << "EOF";
<p class="bottombar"><a href="mailto:$authormail" class="bottombar">$author</a>
:
<a href="webcoma.$lang.html" class="bottombar">$version</a>
:
$date
:
EOF
;
    if ($cache{$page}{$lang}{VALID}) {
	print OUT << "EOF";
<a href="http://validator.w3.org/check?uri=referer">valid HTML 4.01 strict</a>
:
EOF
;
    }
    print OUT << "EOF";
<a href="http://jigsaw.w3.org/css-validator/check/referer">valid CSS</a>
</p>
EOF
;
    
    navBar($i, $lang);

    print OUT "</body></html>";

    close IN or die "can't close <$srcpath/$file.page>: $!";
    close OUT or die "can't close <$destpath/$file.$lang.html>: $!";
}


#


sub initDates()
{
    foreach my $lang (@languages) {
	$date{$lang} = convertDate($lang, `$date_cmd +%Y%m%d\\ %H:%M:%S`);
	print "$lang: $date{$lang}\n";
	chomp $date{$lang};
    }
}


#

sub convertDate($$)
{
    my $lang = shift;
    chomp(my $date = shift);
    my $ret;
    if ($lang eq "de") {
	$ret = `$date_cmd +%c -d "$date"`;
    } else {
	$ret = `LANG=EN $date_cmd -d "$date"`;
    }
    chomp $ret;
    return $ret;
}


#


sub readTag($$)
{
    my $tag = shift;
    my $lang = shift;

    my @ret;

    while (<IN>) {
	last if /#$tag</;
    }
    
    while (my $line = <IN>) {
	last if $line =~ /#$tag>/;
	chomp $line;

	# Einzel-Language-Tag
	if ($line =~ /^&([^:]*):/) {
	    if ($1 eq $lang) {
		$line =~ s/^&$lang://;
		push @ret, $line;
	    }
	}
	# Language-Block
	elsif ($line =~ /^&(.*)</) {
	    if ($1 eq $lang) {
		while (my $line = <IN>) {
		    last if $line =~ /^&$lang>/;
		    chomp $line;
		    push @ret, $line;
		}
	    } else {
		while (<IN>) {
		    last if /^&$1>/;
		}
	    }
	}
	# Freitext
	else {
	    push @ret, $line;
	}
    }

    return @ret;
}


#


sub navBar($$)
{
    my ($i, $lang) = @_;

    my ($me, $path) = getStuff($i, $lang);
    $me =~ s/^.*!//;
    if ($path ne "") {
	$path .= "!";
    }

    my $left  = getLeft($i,$lang);
    my $right = getRight($i,$lang);

    print OUT "<table border=0 width=\"100%\" summary=\"page navigation\" class=\"navbar\"><tr><td align=\"left\">\n";

    # aktuelle Position

    my $uppath="";
    foreach my $upkey (split /!/, $path) {
	print OUT "<a href=\"$upkey.$lang.html\" class=\"navbar\">$cache{$uppath.$upkey}{$lang}{'TITLE'}</a> :\n" if defined $cache{$uppath.$upkey}{$lang}{'TITLE'};
	$uppath .= "$upkey!";
    }
    print OUT "$cache{$uppath.$me}{$lang}{'TITLE'}<br>" if defined $cache{$uppath.$me}{$lang}{'TITLE'};


    # Sprachen

    foreach my $l (@languages) {
	if ($l ne $lang) {
	    if (grep { $pagestructure{$lang}[$i] eq $_ } @{$pagestructure{$l}}) {
		print OUT "<a href=\"$me.$l.html\" class=\"navbar\">$l</a> :\n";
	    }
	} else {
	    print OUT "$l :\n";
	}	    
    }
    print OUT "<a href=\"$sourcepath/$me.txt\" class=\"navbar\">source</a>";

    print OUT "</td>\n<td align=\"right\" valign=\"top\">";

    if ($right ne "" or $left ne "") {

	# NEXT
	
	if ($right ne "") {
	    print OUT "<a href=\"$right.$lang.html\" class=\"navbar\">$cache{$path.$right}{$lang}{'TITLE'}&nbsp;&gt;&gt;</a><br>";
	}
	
	# PREV
	
	if ($left ne "") {
	    print OUT "<a href=\"$left.$lang.html\" class=\"navbar\">&lt;&lt;&nbsp;$cache{$path.$left}{$lang}{'TITLE'}</a>";
	}

    }

    print OUT "</td>\n</tr></table>\n";
}


#


sub expand($$)
{
    my $zeile = shift;
    my $lang = shift;

    if ($zeile =~ /#D?LINK:([^#]*)#/) {
	my ($link, $hash) = split /!/, $1, 2;
	if ($hash) {
	    $hash = "#$hash";
	} else {
	    $hash = "";
	}
	$zeile =~ s/#D?LINK:[^#]*#/<a href="$link.$lang.html$hash">/;
    }

    if ($zeile =~ s/#SUBTITLE:(.*):[^:]*:/<a name="$subtitlecount">$1<\/a>/) {
	$subtitlecount++;
    }

    return $zeile;
}


#


sub newsBox($$)
{
    my $path = shift;
    my $lang = shift;

    my %dates;

    foreach my $file (keys %news) {
	if ($file =~ /^$path/) {
	    my $link = $file;
	    $link =~ s/.*!//g;
	    foreach my $date (keys %{$news{$file}}) {
		if (defined $news{$file}{$date}{$lang}) {
		    push @{$dates{$date}},
		    {
			'LINK' => $link,
			'TEXT' => $news{$file}{$date}{$lang},
			'TITLE'=> $cache{$file}{$lang}{'TITLE'}
		    };
		}
	    }
	}
    }

    if (keys %dates) {
	
	print OUT "<div id=\"news\"><p class=\"newstitle\">&nbsp;&nbsp;News:</p>\n";

	my $count = 1;
	my $max   = 3;
	foreach my $date (reverse sort keys %dates) {
	    last if $count > $max;
	    
	    # Language-Datum!
	    
	    my $datum = $date;
	    
	    if ($lang eq "de") {
		$datum =~ /(....)-(..)-(..)/;
		$datum = "$3.$2.$1";
	    }
	    
	    foreach my $elem (@{$dates{$date}}) {
		print OUT "<p class=\"newsitem\"><a href=\"$elem->{'LINK'}.$lang.html\">$datum: $elem->{'TITLE'}</a><br>\n";
		print OUT "$elem->{'TEXT'}</p>\n";
		$count++ unless $path eq "";
	    }
	}

	print OUT "</div>\n";

    }
    
}


#


sub includeSiteMap($)
{
    my $lang = shift;
    my @oldpath = ("");
    my @list = @{$pagestructure{$lang}};
    print OUT "<ul>\n";
    while (my $page = shift @list) {

	my ($path, $file);

	if ($page =~ /^(.*)!([^!]*)$/) {
	    $path = $1;
	    $file = $2;
	} else {
	    $path = "";
	    $file = $page;
	}
	
	if ($path ne $oldpath[0]) {
	    if ($path !~ /^$oldpath[0]/) {
		while ($path ne $oldpath[0]) {
		    print OUT "</li></ul></li>\n";
		    shift @oldpath;
		}
	    } else {
		print OUT "<ul>\n";
		unshift @oldpath, $path;
	    }
	} else {
	    print OUT "</li>\n" unless @oldpath == 1;
	}

	print OUT "<li><a href=\"$file.$lang.html\">$cache{$page}{$lang}{'TITLE'}</a>\n";

    }
    
    foreach (@oldpath) {
	print OUT "</li></ul>\n";
    }

}


#


sub CheckISBN($)
{

    return 0 unless (my $isbn = $_[0]);
    return 0 unless ($isbn =~ /^(\d{9})([\dxX])$/);

    my ($nummer, $pruef) = ($1, $2);

    my $erg=0;
    my $stelle=2;

    while ($nummer) {
	$erg    += (substr $nummer, -1, 1) * $stelle;
	$nummer  =  substr $nummer, 0, length($nummer) - 1;
	$stelle++;
    }

    $erg = 11 - $erg % 11;

    if ($erg eq "10") {
	$erg = "X";
    } elsif ($erg == 11) {
	$erg = 0;
    }

    return ((lc $erg) eq (lc $pruef));

}


#


sub getLeft($$)
{
    my ($i, $lang) = @_;
    my ($file, $path, @elements) = getStuff($i, $lang);
    my $left="";
    for (my $j = $i-1; $j >= 0; $j--) {
	my @elements = split /!/, $pagestructure{$lang}[$j];
	my $file = pop @elements;
	if ((join '!', @elements) eq $path) {
	    $left = $file;
	    $j = -1;
	}
    }
    return $left;
}


#

    
sub getRight($$)
{
    my ($i, $lang) = @_;
    my ($file, $path, @elements) = getStuff($i, $lang);
    my $right="";
    for (my $j = $i + 1; defined $pagestructure{$lang}[$j]; $j++) {
	my @elements = split /!/, $pagestructure{$lang}[$j];
	my $file = pop @elements;
	if ((join '!', @elements) eq $path) {
	    $right = $file;
	    $j = @{$pagestructure{$lang}} + 1;
	}
    }
    return $right;
}


#


sub getStuff($$)
{
    my ($i, $lang) = @_;
    my @elements = split /!/, $pagestructure{$lang}[$i];
    my $file = pop @elements;
    my $path = join '!', @elements;
    return ($file, $path, @elements);
}

